# -*- coding: utf-8 -*-
"""openrouteservice_api_key.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WIisAPrYe9Gu0xLzhMjnDjrjcCgvjdk_

**Open Source Map with Python**


1.   pip install openrouteservice 
2.   pip install folium

**Key**: 5b3ce3597851110001cf6248e8eb4ba859db4a02a150231dbb3b2a3d
"""

import openrouteservice as ors
import folium

client = ors.Client(key='5b3ce3597851110001cf6248e8eb4ba859db4a02a150231dbb3b2a3d')

def nested_sum(L):
    total = 0  
    for i in L:
        if isinstance(i, list):  # checks if `i` is a list
            total += nested_sum(i)
        else:
            total += i
    return total

def calc_average(total,length):
  average_calculation = total/length
  return average_calculation

def convert_standard_time(seconds):
    min, sec = divmod(seconds, 60)
    hour, min = divmod(min, 60)
    return "%d:%02d:%02d" % (hour, min, sec) 

# coordinates = [[73.870703,18.519479], [72.864846,19.067725]] [E,N]
coordinates = [[73.8567,18.5204], [72.8777,19.0760]]

matrix = client.distance_matrix(
    locations=coordinates,
    profile='driving-hgv', #driving-car, driving-hgv, cycling-regular, cycling-road, cycling-mountain, cycling-electric, foot-walking, foot-hiking, wheelchair
    metrics=['distance', 'duration'],
    validate=False,
    units='km'
)
duration = nested_sum(matrix['durations'])
length = len(matrix['durations'])
average_calculation = calc_average(duration, length)
stand_time = convert_standard_time(average_calculation)
print('Travel Time: ', stand_time)

duration = nested_sum(matrix['distances'])
length = len(matrix['distances'])
average_calculation = calc_average(duration, length)
print('Travel Distance: ', average_calculation,'Kms')